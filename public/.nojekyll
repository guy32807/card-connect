```

Next, since we're using the OpenAI API in our application, we need to make sure our API endpoints are properly handled for static export. For a purely static site, we'll need to adjust our API usage approach:

```typescript
<vscode_codeblock_uri>file:///Users/augustedubuisson/Library/CloudStorage/OneDrive-Personal/CJ/beckett-affiliate-hub/src/lib/api.ts</vscode_codeblock_uri>import OpenAI from 'openai';

// This function would be used client-side with environment variables
export async function callOpenAI({name, topic, message}: {
  name: string;
  topic: string;
  message: string;
}) {
  try {
    // For static hosting, you might want to proxy this through a serverless function
    // Here we're showing a pattern that would work with Vercel Edge Functions or similar
    const response = await fetch('/api/generate-ai-response', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name,
        topic,
        message,
      }),
    });

    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error calling OpenAI API:', error);
    throw error;
  }
}

// Alternative approach using a third-party API gateway
// This could be a separate service like AWS Lambda, Vercel Serverless, etc.
export async function callOpenAIThroughGateway({name, topic, message}: {
  name: string;
  topic: string;
  message: string;
}) {
  // Replace with your API gateway URL
  const API_GATEWAY_URL = 'https://your-api-gateway.com/generate-response';
  
  try {
    const response = await fetch(API_GATEWAY_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // You might need authentication headers here
        'Authorization': `Bearer ${process.env.NEXT_PUBLIC_API_GATEWAY_KEY}`,
      },
      body: JSON.stringify({
        name,
        topic,
        message,
      }),
    });

    if (!response.ok) {
      throw new Error(`API gateway request failed with status ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error calling API gateway:', error);
    throw error;
  }
}